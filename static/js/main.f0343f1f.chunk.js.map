{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","url","this","props","movie","id","window","location","href","react_default","a","createElement","className","key","src","poster_src","alt","title","overview","onClick","viewMovie","bind","type","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","str","_this2","urlStr","$","ajax","success","searchResult","results","movieRows","forEach","poster_path","movieRow","src_Movie_0","push","setState","rows","error","console","e","target","width","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAuCeA,mMAlCP,IAAMC,EAAM,oCAAqCC,KAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAKP,mCAMpB,OAEIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,IAAKX,KAAKC,MAAMC,MAAMC,IAC7CI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAMG,IAAKZ,KAAKC,MAAMC,MAAMW,WAAYH,UAAU,SAASI,IAAI,YAEnEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,oBAAH,IAAmBT,KAAKC,MAAMC,MAAMa,QAGxCR,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0BAAH,IAAyBT,KAAKC,MAAMC,MAAMc,WAE9CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MAAMO,QAASjB,KAAKkB,UAAUC,KAAKnB,MAAOoB,KAAK,SAASC,MAAM,mBA1BnFC,IAAMC,4BCgGXC,cA7Fb,SAAAA,EAAYvB,GAAM,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,QACK+B,MAAQ,GAyCfN,EAAKO,gBA3CaP,6EA+CNQ,GAAI,IAAAC,EAAAlC,KACVmC,EAAS,4FAA4FF,EAC3GG,IAAEC,KAAK,CACLtC,IAAIoC,EACJG,QAAQ,SAACC,GAEP,IAAMC,EAAUD,EAAaC,QACzBC,EAAY,GAEhBD,EAAQE,QAAQ,SAACxC,GACfA,EAAMW,WAAa,kCAAmCX,EAAMyC,YAC5D,IAAMC,EAAWrC,EAAAC,EAAAC,cAACoC,EAAD,CAAOlC,IAAKT,EAAMC,GAAID,MAAOA,IAC9CuC,EAAUK,KAAKF,KAEjBV,EAAKa,SAAS,CAACC,KAAKP,KAEtBQ,MAAM,WACJC,QAAQD,MAAM,0EAKAE,GAClB,IAAMlB,EAAMkB,EAAEC,OAAO/B,MACrBrB,KAAKgC,cAAcC,oCAIjB,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAK4C,MAAM,KAAMzC,IAAI,eAAeE,IAAI,UAExCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,sCAIFF,EAAAC,EAAAC,cAAA,SAAO6C,SAAUtD,KAAKuD,oBAAoBpC,KAAKnB,MAAOU,UAAU,YAAYU,KAAK,OAAOoC,YAAY,8BACnGxD,KAAK+B,MAAMiB,aAxFFzB,aCOEkC,QACW,cAA7BrD,OAAOC,SAASqD,UAEe,UAA7BtD,OAAOC,SAASqD,UAEhBtD,OAAOC,SAASqD,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f0343f1f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\n\r\nclass Movie extends React.Component{\r\n    viewMovie() { \r\n        const url = \"https://www.themoviedb.org/movie/\" +this.props.movie.id;\r\n       window.location.href=url;\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n\r\n            <div className=\"container\" key={this.props.movie.id}>\r\n                <div >\r\n                    <img  src={this.props.movie.poster_src} className=\"poster\" alt=\"poster\" />\r\n                </div>\r\n                <div className=\"details\">\r\n                    <div>\r\n                        {/* title */}\r\n                        <p><b>Title :</b> {this.props.movie.title}</p>\r\n                    </div>\r\n                        \r\n                    <div>\r\n                        {/* description */}\r\n                        <p><b>Description :</b> {this.props.movie.overview}</p>\r\n                    </div>\r\n                    <div className=\"btns\">\r\n                        <input className=\"btn\" onClick={this.viewMovie.bind(this)} type=\"button\" value=\"View\"/>\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\nimport $ from 'jquery';\n\nclass App extends Component {\n  constructor(props){\n    super();\n    this.state = {};\n\n  //   const movies = [\n  //     {id:0,title:'Avengers Infinity War',overview:'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born '},\n  //     {id:1,title:'Forrest Gump',overview:'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born '},\n  //     {id:2,title:'Green Mile',overview:'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born '}\n  //   ]\n\n  //   this.state = {\n  //     rows:[\n  //       <p>This is my row0</p>,\n  //       <p>This is my row1</p>,\n  //       <p>This is my row2</p>,\n  //       <p>This is my row3</p>\n  //     ]\n  //   };\n\n  //   var movieRows = [];\n\n  //   movies.forEach(movie =>{\n  //     console.log(movie.title);\n  //     const movieRow = <Movie movie={movie} />\n  //     // const movieRow = <table key={movie.id}>\n  //     //   <tbody>\n  //     //     <tr>\n  //     //       <td>\n  //     //         <img alt=\"pic\" width=\"100\" src=\"https://unsplash.it/400/400\" />\n  //     //       </td>\n  //     //       <td>\n  //     //         {movie.title}\n  //     //         <p>{movie.overview}</p>\n  //     //       </td>\n  //     //     </tr>\n  //     //   </tbody>\n  //     // </table>\n  //     movieRows.push(movieRow);\n  //   });\n\n  //     this.state = {rows : movieRows};\n\n  // \n  this.performSearch();\n\n}\n\nperformSearch(str){\n  const urlStr = 'https://api.themoviedb.org/3/search/movie?api_key=b5bea57017a2c99a589994903ab20498&query='+str;\n  $.ajax({\n    url:urlStr,\n    success:(searchResult)=>{\n       \n      const results = searchResult.results;\n      var movieRows = [];\n\n      results.forEach((movie)=>{\n        movie.poster_src = 'https://image.tmdb.org/t/p/w500'+ movie.poster_path;\n        const movieRow = <Movie key={movie.id} movie={movie}/>\n        movieRows.push(movieRow);\n      });\n      this.setState({rows:movieRows});\n    },\n    error:() =>{\n      console.error(\"Error when fetched data\");\n    }\n  });\n}\n\nsearchChangeHandler(e){\n  const str = e.target.value;\n  this.performSearch(str);\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"nav\">\n          <div className=\"imgBar\">\n          <img width=\"60\"  src=\"app_logo.svg\" alt=\"logo\" />\n          </div>\n          <div className=\"text\">\n          <p>Search Favourite Movies</p>\n          </div>\n        </div>\n\n        <input onChange={this.searchChangeHandler.bind(this)} className=\"searchBar\" type=\"text\" placeholder=\"Type your Favourite Movie\" />\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}